{
  "sentences": [
    {
      "id": 1,
      "text": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    return new int[0];\n}",
      "difficulty": "medium",
      "type": "algorithms"
    },
    {
      "id": 2,
      "text": "public List<Integer> findPrimes(int n) {\n    boolean[] isPrime = new boolean[n + 1];\n    Arrays.fill(isPrime, true);\n    for (int i = 2; i * i <= n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j <= n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    return IntStream.range(2, n + 1)\n        .filter(i -> isPrime[i])\n        .boxed()\n        .collect(Collectors.toList());\n}",
      "difficulty": "medium",
      "type": "algorithms"
    },
    {
      "id": 3,
      "text": "public String compressString(String str) {\n    StringBuilder compressed = new StringBuilder();\n    int count = 1;\n    for (int i = 1; i <= str.length(); i++) {\n        if (i == str.length() || str.charAt(i) != str.charAt(i-1)) {\n            compressed.append(str.charAt(i-1)).append(count);\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    return compressed.length() < str.length() ? compressed.toString() : str;\n}",
      "difficulty": "medium",
      "type": "strings"
    },
    {
      "id": 4,
      "text": "public int findKthLargest(int[] nums, int k) {\n    PriorityQueue<Integer> heap = new PriorityQueue<>();\n    for (int num : nums) {\n        heap.offer(num);\n        if (heap.size() > k) {\n            heap.poll();\n        }\n    }\n    return heap.peek();\n}",
      "difficulty": "medium",
      "type": "algorithms"
    },
    {
      "id": 5,
      "text": "public boolean isValidParentheses(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (char c : s.toCharArray()) {\n        if (c == '(' || c == '{' || c == '[') {\n            stack.push(c);\n        } else if (stack.isEmpty() || !isMatching(stack.pop(), c)) {\n            return false;\n        }\n    }\n    return stack.isEmpty();\n}",
      "difficulty": "medium",
      "type": "data_structures"
    },
    {
      "id": 6,
      "text": "public int findMaxSubArray(int[] nums) {\n    int maxSoFar = nums[0];\n    int maxEndingHere = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        maxEndingHere = Math.max(nums[i], maxEndingHere + nums[i]);\n        maxSoFar = Math.max(maxSoFar, maxEndingHere);\n    }\n    return maxSoFar;\n}",
      "difficulty": "medium",
      "type": "algorithms"
    },
    {
      "id": 7,
      "text": "public void quickSort(int[] arr, int left, int right) {\n    if (left < right) {\n        int pivotIndex = partition(arr, left, right);\n        quickSort(arr, left, pivotIndex - 1);\n        quickSort(arr, pivotIndex + 1, right);\n    }\n}",
      "difficulty": "medium",
      "type": "algorithms"
    },
    {
      "id": 8,
      "text": "public int binarySearch(int[] arr, int target) {\n    int left = 0, right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}",
      "difficulty": "easy",
      "type": "algorithms"
    },
    {
      "id": 9,
      "text": "public List<List<Integer>> findCombinations(int[] nums, int target) {\n    List<List<Integer>> result = new ArrayList<>();\n    Arrays.sort(nums);\n    backtrack(result, new ArrayList<>(), nums, target, 0);\n    return result;\n}",
      "difficulty": "hard",
      "type": "algorithms"
    },
    {
      "id": 10,
      "text": "public int countIslands(char[][] grid) {\n    int count = 0;\n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == '1') {\n                dfs(grid, i, j);\n                count++;\n            }\n        }\n    }\n    return count;\n}",
      "difficulty": "medium",
      "type": "graphs"
    },
    {
      "id": 11,
      "text": "CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n    try {\n        Thread.sleep(1000);\n        return \"Hello\";\n    } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n    }\n}).thenApply(s -> s + \" World\");",
      "difficulty": "medium",
      "type": "async"
    },
    {
      "id": 12,
      "text": "public Optional<Double> calculateAverage(List<Integer> numbers) {\n    return numbers.stream()\n        .filter(n -> n != null && n > 0)\n        .mapToDouble(Integer::doubleValue)\n        .average();\n}",
      "difficulty": "medium",
      "type": "streams"
    },
    {
      "id": 13,
      "text": "public boolean isAnagram(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n    int[] freq = new int[26];\n    s1.chars().forEach(c -> freq[c - 'a']++);\n    s2.chars().forEach(c -> freq[c - 'a']--);\n    return Arrays.stream(freq).allMatch(count -> count == 0);\n}",
      "difficulty": "medium",
      "type": "strings"
    },
    {
      "id": 14,
      "text": "public int longestPalindromicSubstring(String s) {\n    int maxLen = 0;\n    for (int i = 0; i < s.length(); i++) {\n        maxLen = Math.max(maxLen,\n            expandAroundCenter(s, i, i),\n            expandAroundCenter(s, i, i + 1));\n    }\n    return maxLen;\n}",
      "difficulty": "hard",
      "type": "strings"
    },
    {
      "id": 15,
      "text": "public void mergeSort(int[] arr, int left, int right) {\n    if (left < right) {\n        int mid = (left + right) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}",
      "difficulty": "medium",
      "type": "algorithms"
    }
  ],
  "metadata": {
    "version": "1.0",
    "totalSentences": 15,
    "lastUpdated": "2025-01-31",
    "categories": [
      "algorithms",
      "data_structures",
      "strings",
      "streams",
      "async",
      "graphs"
    ],
    "difficultyLevels": ["easy", "medium", "hard"]
  }
}
